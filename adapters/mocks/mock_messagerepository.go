// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/chrikar/chatheon/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageRepository creates a new instance of MockMessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageRepository {
	mock := &MockMessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageRepository is an autogenerated mock type for the MessageRepository type
type MockMessageRepository struct {
	mock.Mock
}

type MockMessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageRepository) EXPECT() *MockMessageRepository_Expecter {
	return &MockMessageRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) Create(message *domain.Message) error {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Message) error); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMessageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - message
func (_e *MockMessageRepository_Expecter) Create(message interface{}) *MockMessageRepository_Create_Call {
	return &MockMessageRepository_Create_Call{Call: _e.mock.On("Create", message)}
}

func (_c *MockMessageRepository_Create_Call) Run(run func(message *domain.Message)) *MockMessageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Message))
	})
	return _c
}

func (_c *MockMessageRepository_Create_Call) Return(err error) *MockMessageRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageRepository_Create_Call) RunAndReturn(run func(message *domain.Message) error) *MockMessageRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesByReceiver provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) GetMessagesByReceiver(receiverID string, limit int, offset int) ([]*domain.Message, error) {
	ret := _mock.Called(receiverID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByReceiver")
	}

	var r0 []*domain.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*domain.Message, error)); ok {
		return returnFunc(receiverID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*domain.Message); ok {
		r0 = returnFunc(receiverID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(receiverID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageRepository_GetMessagesByReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesByReceiver'
type MockMessageRepository_GetMessagesByReceiver_Call struct {
	*mock.Call
}

// GetMessagesByReceiver is a helper method to define mock.On call
//   - receiverID
//   - limit
//   - offset
func (_e *MockMessageRepository_Expecter) GetMessagesByReceiver(receiverID interface{}, limit interface{}, offset interface{}) *MockMessageRepository_GetMessagesByReceiver_Call {
	return &MockMessageRepository_GetMessagesByReceiver_Call{Call: _e.mock.On("GetMessagesByReceiver", receiverID, limit, offset)}
}

func (_c *MockMessageRepository_GetMessagesByReceiver_Call) Run(run func(receiverID string, limit int, offset int)) *MockMessageRepository_GetMessagesByReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockMessageRepository_GetMessagesByReceiver_Call) Return(messages []*domain.Message, err error) *MockMessageRepository_GetMessagesByReceiver_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockMessageRepository_GetMessagesByReceiver_Call) RunAndReturn(run func(receiverID string, limit int, offset int) ([]*domain.Message, error)) *MockMessageRepository_GetMessagesByReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesBySender provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) GetMessagesBySender(senderID string) ([]*domain.Message, error) {
	ret := _mock.Called(senderID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesBySender")
	}

	var r0 []*domain.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*domain.Message, error)); ok {
		return returnFunc(senderID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*domain.Message); ok {
		r0 = returnFunc(senderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(senderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageRepository_GetMessagesBySender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesBySender'
type MockMessageRepository_GetMessagesBySender_Call struct {
	*mock.Call
}

// GetMessagesBySender is a helper method to define mock.On call
//   - senderID
func (_e *MockMessageRepository_Expecter) GetMessagesBySender(senderID interface{}) *MockMessageRepository_GetMessagesBySender_Call {
	return &MockMessageRepository_GetMessagesBySender_Call{Call: _e.mock.On("GetMessagesBySender", senderID)}
}

func (_c *MockMessageRepository_GetMessagesBySender_Call) Run(run func(senderID string)) *MockMessageRepository_GetMessagesBySender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMessageRepository_GetMessagesBySender_Call) Return(messages []*domain.Message, err error) *MockMessageRepository_GetMessagesBySender_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockMessageRepository_GetMessagesBySender_Call) RunAndReturn(run func(senderID string) ([]*domain.Message, error)) *MockMessageRepository_GetMessagesBySender_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageStatus provides a mock function for the type MockMessageRepository
func (_mock *MockMessageRepository) SetMessageStatus(messageID uuid.UUID, status domain.MessageStatus) error {
	ret := _mock.Called(messageID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, domain.MessageStatus) error); ok {
		r0 = returnFunc(messageID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageRepository_SetMessageStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageStatus'
type MockMessageRepository_SetMessageStatus_Call struct {
	*mock.Call
}

// SetMessageStatus is a helper method to define mock.On call
//   - messageID
//   - status
func (_e *MockMessageRepository_Expecter) SetMessageStatus(messageID interface{}, status interface{}) *MockMessageRepository_SetMessageStatus_Call {
	return &MockMessageRepository_SetMessageStatus_Call{Call: _e.mock.On("SetMessageStatus", messageID, status)}
}

func (_c *MockMessageRepository_SetMessageStatus_Call) Run(run func(messageID uuid.UUID, status domain.MessageStatus)) *MockMessageRepository_SetMessageStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(domain.MessageStatus))
	})
	return _c
}

func (_c *MockMessageRepository_SetMessageStatus_Call) Return(err error) *MockMessageRepository_SetMessageStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageRepository_SetMessageStatus_Call) RunAndReturn(run func(messageID uuid.UUID, status domain.MessageStatus) error) *MockMessageRepository_SetMessageStatus_Call {
	_c.Call.Return(run)
	return _c
}
