// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/chrikar/chatheon/domain"
	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: senderID, receiverID, content
func (_m *MessageService) CreateMessage(senderID string, receiverID string, content string) error {
	ret := _m.Called(senderID, receiverID, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(senderID, receiverID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessagesByReceiver provides a mock function with given fields: receiverID
func (_m *MessageService) GetMessagesByReceiver(receiverID string) ([]*domain.Message, error) {
	ret := _m.Called(receiverID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByReceiver")
	}

	var r0 []*domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Message, error)); ok {
		return rf(receiverID)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Message); ok {
		r0 = rf(receiverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(receiverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
