// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/chrikar/chatheon/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageService creates a new instance of MockMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageService {
	mock := &MockMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageService is an autogenerated mock type for the MessageService type
type MockMessageService struct {
	mock.Mock
}

type MockMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageService) EXPECT() *MockMessageService_Expecter {
	return &MockMessageService_Expecter{mock: &_m.Mock}
}

// CreateMessage provides a mock function for the type MockMessageService
func (_mock *MockMessageService) CreateMessage(senderID string, receiverID string, content string) error {
	ret := _mock.Called(senderID, receiverID, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(senderID, receiverID, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageService_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MockMessageService_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - senderID
//   - receiverID
//   - content
func (_e *MockMessageService_Expecter) CreateMessage(senderID interface{}, receiverID interface{}, content interface{}) *MockMessageService_CreateMessage_Call {
	return &MockMessageService_CreateMessage_Call{Call: _e.mock.On("CreateMessage", senderID, receiverID, content)}
}

func (_c *MockMessageService_CreateMessage_Call) Run(run func(senderID string, receiverID string, content string)) *MockMessageService_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMessageService_CreateMessage_Call) Return(err error) *MockMessageService_CreateMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageService_CreateMessage_Call) RunAndReturn(run func(senderID string, receiverID string, content string) error) *MockMessageService_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessagesByReceiver provides a mock function for the type MockMessageService
func (_mock *MockMessageService) GetMessagesByReceiver(receiverID string, limit int, offset int) ([]*domain.Message, error) {
	ret := _mock.Called(receiverID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByReceiver")
	}

	var r0 []*domain.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]*domain.Message, error)); ok {
		return returnFunc(receiverID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []*domain.Message); ok {
		r0 = returnFunc(receiverID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(receiverID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMessageService_GetMessagesByReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessagesByReceiver'
type MockMessageService_GetMessagesByReceiver_Call struct {
	*mock.Call
}

// GetMessagesByReceiver is a helper method to define mock.On call
//   - receiverID
//   - limit
//   - offset
func (_e *MockMessageService_Expecter) GetMessagesByReceiver(receiverID interface{}, limit interface{}, offset interface{}) *MockMessageService_GetMessagesByReceiver_Call {
	return &MockMessageService_GetMessagesByReceiver_Call{Call: _e.mock.On("GetMessagesByReceiver", receiverID, limit, offset)}
}

func (_c *MockMessageService_GetMessagesByReceiver_Call) Run(run func(receiverID string, limit int, offset int)) *MockMessageService_GetMessagesByReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockMessageService_GetMessagesByReceiver_Call) Return(messages []*domain.Message, err error) *MockMessageService_GetMessagesByReceiver_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *MockMessageService_GetMessagesByReceiver_Call) RunAndReturn(run func(receiverID string, limit int, offset int) ([]*domain.Message, error)) *MockMessageService_GetMessagesByReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageStatus provides a mock function for the type MockMessageService
func (_mock *MockMessageService) SetMessageStatus(messageID string, status domain.MessageStatus) error {
	ret := _mock.Called(messageID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetMessageStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, domain.MessageStatus) error); ok {
		r0 = returnFunc(messageID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMessageService_SetMessageStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageStatus'
type MockMessageService_SetMessageStatus_Call struct {
	*mock.Call
}

// SetMessageStatus is a helper method to define mock.On call
//   - messageID
//   - status
func (_e *MockMessageService_Expecter) SetMessageStatus(messageID interface{}, status interface{}) *MockMessageService_SetMessageStatus_Call {
	return &MockMessageService_SetMessageStatus_Call{Call: _e.mock.On("SetMessageStatus", messageID, status)}
}

func (_c *MockMessageService_SetMessageStatus_Call) Run(run func(messageID string, status domain.MessageStatus)) *MockMessageService_SetMessageStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.MessageStatus))
	})
	return _c
}

func (_c *MockMessageService_SetMessageStatus_Call) Return(err error) *MockMessageService_SetMessageStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMessageService_SetMessageStatus_Call) RunAndReturn(run func(messageID string, status domain.MessageStatus) error) *MockMessageService_SetMessageStatus_Call {
	_c.Call.Return(run)
	return _c
}
