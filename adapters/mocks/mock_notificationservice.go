// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) Notify(userID string, message string) error {
	ret := _mock.Called(userID, message)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(userID, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationService_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockNotificationService_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - userID
//   - message
func (_e *MockNotificationService_Expecter) Notify(userID interface{}, message interface{}) *MockNotificationService_Notify_Call {
	return &MockNotificationService_Notify_Call{Call: _e.mock.On("Notify", userID, message)}
}

func (_c *MockNotificationService_Notify_Call) Run(run func(userID string, message string)) *MockNotificationService_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationService_Notify_Call) Return(err error) *MockNotificationService_Notify_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationService_Notify_Call) RunAndReturn(run func(userID string, message string) error) *MockNotificationService_Notify_Call {
	_c.Call.Return(run)
	return _c
}
